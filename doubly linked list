class Doubly_Linked_List{

	private:
		Node* Head;
		Node* Tail;
    	int size;

	public:
		Doubly_Linked_List(){
			Head = NULL;
			Tail = NULL;
			size = 0;
		}
   
void insertFirst(int elem) {

Node* temp = new Node(elem);

if(Head==NULL) {

	Head = temp;
	Tail = temp;

} else {

		temp->next = Head;
		Head->prev = temp;
		Head = temp;

	}
	size++;
}
void insertLast(int elem) {

Node* temp = new Node(elem);

if(Head==NULL) {

	Head = temp;
	Tail = temp;

} else {

		Tail->next = temp;
		temp->prev = Tail;
		Tail = temp;

	}
	size++;
}
void insertAt(int pos, int elem) {
   if(pos < 0 || pos > size) 
		cout << "Invalid Index“ <<endl;
   else if (pos == 0) {
		insertFirst(elem);
   else if(pos == size)
		insertLast(elem);
   else {
   	Node* temp = new Node(elem);
   	Node* current = Head;
   	for(int i=0; i < pos-1; i++)
   		current = current->next;
   
   		temp->next = current->next;
		temp->prev = current;
		current->next = temp;
		(temp->next)->prev = temp;
   		size++;
   }
}
void deleteFirst() {
   if (Head == NULL) 
		cout << “Empty List“ <<endl;
   else {
	Node* temp = Head;
	if (size == 1){
		delete temp;
		Head = NULL; 	
		Tail = NULL;
	} else {
		Head = Head->next;
		Head->prev = NULL;
		delete temp;  
 	}
	size--;
   }
}
void deleteLast() {
   if (Head == NULL) 
		cout << “Empty List“ <<endl;
   else {
		Node* temp = Tail;
	if (size == 1){
		delete temp;
		Head = NULL; 	
		Tail = NULL;
	} else {
		Node* current = Head;
		for (int i = 0; i < size - 2; i++) {
	current = current->next;
}
			Tail = current; 
			Tail->next = NULL;
delete temp; 	
}
	size--;
   }
}
void deleteAt(int pos) {
	if (pos < 0 || pos >= size)
		cout << "Invalid position" << endl;
	else if (pos == 0)
		deleteFirst();
	else if (pos == size - 1)
		deleteLast();
	else {
		Node* current = Head;
		for (int i = 0; i < pos; i++) {
			current = current->next;
		}
		Node* temp = current;
		(current->prev)->next = temp->next;
		(current->next)->prev = temp->prev;
		delete temp;
		size--;
	}
} 




